class DementiaStatScreen : StatusScreen
{
	int intermissioncounter;	

	override void Start (wbstartstruct wbstartstruct)
	{
		wbs = wbstartstruct;
		acceleratestage = 0;
		cnt = bcnt = 0;
		me = wbs.pnum;
		otherkills = wbs.totalkills;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			Plrs[i] = wbs.plyr[i];
			otherkills -= Plrs[i].skills;
		}

		if (gameinfo.mHideParTimes)
		{
			// par time and suck time are not displayed if zero.
			wbs.partime = 0;
			wbs.sucktime = 0;
		}
		
		entering.Init(gameinfo.mStatscreenEnteringFont);
		finishedp.Init(gameinfo.mStatscreenFinishedFont);
		mapname.Init(gameinfo.mStatscreenMapNameFont);
		content.Init(gameinfo.mStatscreenContentFont);
		author.Init(gameinfo.mStatscreenAuthorFont);

		lnametexts[0] = StringTable.Localize(wbstartstruct.thisname);		
		lnametexts[1] = StringTable.Localize(wbstartstruct.nextname);
		authortexts[0] = StringTable.Localize(wbstartstruct.thisauthor);
		authortexts[1] = StringTable.Localize(wbstartstruct.nextauthor);

		bg = InterBackground.Create(wbs);
		noautostartmap = bg.LoadBackground(false);
		initStats();
		
		wrapwidth = cwidth = screen.GetWidth();
		cheight = screen.GetHeight();
		scalemode = -1;
		scaleFactorX = CleanXfac;
		scaleFactorY = CleanYfac;
	}

	override void initStats ()
	{
		intermissioncounter = gameinfo.intermissioncounter;
		CurState = StatCount;
		acceleratestage = 0;
		sp_state = 1;
		cnt_kills[0] = cnt_items[0] = cnt_secret[0] = -1;
		cnt_time = cnt_par = -1;
		cnt_pause = GameTicRate;
	
		cnt_total_time = -1;
	}

	override int drawLF ()
	{
		bool ispatch = wbs.LName0.isValid();
		int oldy = TITLEY * scaleFactorY;
		int h;
		
		if (!ispatch)
		{
			let asc = mapname.mFont.GetMaxAscender(lnametexts[1]);
			if (asc > TITLEY - 2)
			{
				oldy = (asc+2) * scaleFactorY;
			}
		}
		
		int y = DrawName(oldy, wbs.LName0, lnametexts[0]);

		if (ispatch) 
		{
			int disp = 0;
			if (authortexts[0].length() == 0)
			{
				int h1 = BigFont.GetHeight() - BigFont.GetDisplacement();
				int h2 = (y - oldy) / scaleFactorY / 4;
				disp = min(h1, h2);
				
				if (!TexMan.OkForLocalization(finishedPatch, "ENTERING..."))
				{
					disp += finishedp.mFont.GetMaxAscender("ENTERING...");
				}
			}
			else
			{
					disp += author.mFont.GetMaxAscender(authortexts[0]);
			}
			y += disp * scaleFactorY;
		}
		
		y = DrawAuthor(y, authortexts[0]);
		

		int statsy = multiplayer? NG_STATSY : SP_STATSY * scaleFactorY;
		if (y < (statsy - finishedp.mFont.GetHeight()*3/4) * scaleFactorY)
		{
			y = DrawPatchOrText(y, finishedp, finishedPatch, "EXITING NOW...");
		}
		return y;
	}

	override void drawEL ()
	{
		bool ispatch = TexMan.OkForLocalization(enteringPatch, "ENTERING...");
		int oldy = TITLEY * scaleFactorY;

		if (!ispatch)
		{
			let asc = entering.mFont.GetMaxAscender("ENTERING...");
			if (asc > TITLEY - 2)
			{
				oldy = (asc+2) * scaleFactorY;
			}
		}

		int y = DrawPatchOrText(oldy, entering, enteringPatch, "ENTERING...");
		
		if (ispatch)
		{
			int h1 = BigFont.GetHeight() - BigFont.GetDisplacement();
			let size = TexMan.GetScaledSize(enteringPatch);
			int h2 = int(size.Y);
			let disp = min(h1, h2) / 4;
			if (!wbs.LName1.isValid())
			{
				disp += mapname.mFont.GetMaxAscender(lnametexts[1]);
			}
			y += disp * scaleFactorY;
		}

		y = DrawName(y, wbs.LName1, lnametexts[1]);

		if (wbs.LName1.isValid() && authortexts[1].length() > 0) 
		{
			y += author.mFont.GetMaxAscender(authortexts[1]) * scaleFactorY;
		}
			
		DrawAuthor(y, authortexts[1]);

	}

	override void updateStats ()
	{
		if (acceleratestage && sp_state != 10)
		{
			acceleratestage = 0;
			sp_state = 10;
			PlaySound("intermission/nextstage");

			cnt_kills[0] = Plrs[me].skills;
			cnt_items[0] = Plrs[me].sitems;
			cnt_secret[0] = Plrs[me].ssecret;
			cnt_time = Thinker.Tics2Seconds(Plrs[me].stime);
			cnt_par = wbs.partime / GameTicRate;
			cnt_total_time = Thinker.Tics2Seconds(wbs.totaltime);
		}

		if (sp_state == 2)
		{
			if (intermissioncounter)
			{
				cnt_kills[0] += 2;

				if (!(bcnt&3))
					PlaySound("intermission/tick");
			}
			if (!intermissioncounter || cnt_kills[0] >= Plrs[me].skills)
			{
				cnt_kills[0] = Plrs[me].skills;
				PlaySound("intermission/nextstage");
				sp_state++;
			}
		}
		else if (sp_state == 4)
		{
			if (intermissioncounter)
			{
				cnt_items[0] += 2;

				if (!(bcnt&3))
					PlaySound("intermission/tick");
			}
			if (!intermissioncounter || cnt_items[0] >= Plrs[me].sitems)
			{
				cnt_items[0] = Plrs[me].sitems;
				PlaySound("intermission/nextstage");
				sp_state++;
			}
		}
		else if (sp_state == 6)
		{
			if (intermissioncounter)
			{
				cnt_secret[0] += 2;

				if (!(bcnt&3))
					PlaySound("intermission/tick");
			}
			if (!intermissioncounter || cnt_secret[0] >= Plrs[me].ssecret)
			{
				cnt_secret[0] = Plrs[me].ssecret;
				PlaySound("intermission/nextstage");
				sp_state++;
			}
		}
		else if (sp_state == 8)
		{
			//removal of time because FUCK THAT 
			//TAKE YOUR TIIIIME
			sp_state++;
		}
		else if (sp_state == 10)
		{
			if (acceleratestage)
			{
				PlaySound("intermission/paststats");
				initShowNextLoc();
			}
		}
		else if (sp_state & 1)
		{
			if (!--cnt_pause)
			{
				sp_state++;
				cnt_pause = GameTicRate;
			}
		}
	}

	override void drawStats (void)
	{
		// line height
		int lh = IntermissionFont.GetHeight() * 3 / 2;

		drawLF();
		
		bool useGfx = false;

		let tcolor = useGfx? Font.CR_UNTRANSLATED : content.mColor;

		Font printFont;
		Font textFont = generic_ui? NewSmallFont : content.mFont;
		int statsx = SP_STATSX;

		String percentage = wi_percents? " 0000%" : " 0000/0000";
		int perc_width = textFont.StringWidth(percentage);
		int k_width = textFont.StringWidth("Victims");
		int i_width = textFont.StringWidth("Pickups");
		int s_width = textFont.StringWidth("Oddities");
		int allwidth = max(k_width, i_width, s_width) + perc_width;
		if ((SP_STATSX*2 + allwidth) > 320)	
		{
			statsx = max(0, (320 - allwidth) / 2);
		}
		printFont = generic_ui? IntermissionFont : content.mFont;
		DrawText (textFont, tcolor, statsx, SP_STATSY, "Victims");
		DrawText (textFont, tcolor, statsx, SP_STATSY+lh, "Pickups");
		DrawText (textFont, tcolor, statsx, SP_STATSY+2*lh, "Oddities"); 
		drawPercent (printFont, 320 - statsx, SP_STATSY, cnt_kills[0], wbs.maxkills, true, tcolor);
		drawPercent (printFont, 320 - statsx, SP_STATSY+lh, cnt_items[0], wbs.maxitems, true, tcolor);
		drawPercent (printFont, 320 - statsx, SP_STATSY+2*lh, cnt_secret[0], wbs.maxsecret, true, tcolor);
	}
}